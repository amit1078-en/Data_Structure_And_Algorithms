/*
Construct Tree from Preorder Traversal 

Medium Accuracy: 50.68% Submissions: 12580 Points: 4

Construct a binary tree of size N using two given arrays pre[] and preLN[]. Array pre[] represents preorder traversal of a binary tree.
 Array preLN[] has only two possible values ‘L’ and ‘N’. The value ‘L’ in preLN[] indicates that the corresponding node in Binary Tree is
  a leaf node and value ‘N’ indicates that the corresponding node is a non-leaf node.
Note: Every node in the binary tree has either 0 or 2 children.

Example 1:

Input :      
N = 5
pre[] = {10, 30, 20, 5, 15}
preLN[] = {N, N, L, L, L}

Output:
          10
        /    \
      30      15
     /  \     
   20    5   
 

Your Task:  
You dont need to read input or print anything. Complete the function constructTree() which takes N, pre[] and preLN[] as input parameters
 and returns the root node of the constructed binary tree.
Note: The output generated by the compiler will contain the inorder traversal of the created binary tree.
 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
1 = N = 104
1 = pre[i] = 107
preLN[i]: {'N', 'L'}
*/


#include <bits/stdc++.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

struct Node
{
	int data;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    data = x;
	    left = NULL;
	    right = NULL;
	}
};

void printInorder (struct Node* node)
{
	if (node == NULL)return;
	printInorder(node->left);
	printf("%d ", node->data);
	printInorder (node->right);
}

Node* constructTree(int n, int pre[], char preLN[]);

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Node* root = NULL;
        int n;
        cin>>n;
        int pre[n];
        char preLN[n];
        for(int i=0; i<n; i++)cin>>pre[i];
        for(int i=0; i<n; i++)cin>>preLN[i];
        root = constructTree (n, pre, preLN);
        printInorder(root);
        cout<<endl;
    }
	return 0;
}
// } Driver Code Ends



int i = 0;
struct Node* help(int n ,int pre[],char p[])
{

    if(i<n)
    {
        if(p[i]=='L')
        {
            struct Node* Newn = new Node(pre[i]);
            i+=1;
            return Newn;
        }
        struct Node* Newn = new Node(pre[i]);
         i+=1;
        Newn->left  = help(n,pre,p);
        Newn->right = help(n,pre,p);
        return Newn;
    }
    return NULL;
}
struct Node *constructTree(int n, int pre[], char preLN[])
{
    i  = 0;
    return help(n,pre,preLN);
}
